Parameters:
  UniqueName:
    Type: String

Resources:
  Arm64InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref Arm64AccessRole

  Arm64AccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole

  RolePolicies:
    Type: AWS::IAM::Policy
    DependsOn:
      - Arm64Instance
    Properties:
      PolicyName: Arm64AccessPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 's3:ListBucket'
            Resource: !Sub 'arn:aws:s3:::${UniqueName}'
          - Effect: Allow
            Action: 's3:*Object'
            Resource: !Sub 'arn:aws:s3:::${UniqueName}/*'
          - Effect: Allow
            Action: 'ec2:CreateTags'
            Resource: 'arn:aws:ex2:${AWS::Region}:*'
      Roles:
        - !Ref Arm64AccessRole


  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22

  Arm64Instance:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: ec2-keypair
      InstanceType: t4g.micro
      ImageId: ami-087fa126bfdebc5c3  # Ubuntu18.04 Arm64
      IamInstanceProfile: !Ref Arm64InstanceProfile
      SecurityGroups:
        - !Ref SSHSecurityGroup
      Tags:
        - Key: Name
          Value: !Ref UniqueName
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          az=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)
          region=${!az%%?}
          instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
          apt update
          apt install -y awscli

          aws ec2 create-tags --resources $instance_id --region $region --tags Key=Status,Value=CONFIGURING
          apt remove lxd-client -y
          snap install lxd
          lxd init --auto
          snap install snapcraft --classic

          aws ec2 create-tags --resources $instance_id --region $region --tags Key=Status,Value=SNAPPING
          mkdir -p /tmp/robomaker_snap
          cd tmp/robomaker_snap
          aws s3 cp s3://${UniqueName}/src src/ --recursive
          aws s3 cp s3://${UniqueName}/snap snap/ --recursive
          #snapcraft --use-lxd
          #aws s3 cp *.snap s3://${UniqueName}/

          aws ec2 create-tags --resources $instance_id --region $region --tags Key=Status,Value=COMPLETE
          echo 'Exiting user data script'

          echo ${AWS::Region}

Outputs:
  InstanceId:
    Value: !Ref Arm64Instance

